/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Objects;
import java.util.StringJoiner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openziti.management.ApiClient;

/** AuthPolicyPrimaryUpdbPatch */
@JsonPropertyOrder({
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_ALLOWED,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_LOCKOUT_DURATION_MINUTES,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_MAX_ATTEMPTS,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_MIN_PASSWORD_LENGTH,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_REQUIRE_MIXED_CASE,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_REQUIRE_NUMBER_CHAR,
    AuthPolicyPrimaryUpdbPatch.JSON_PROPERTY_REQUIRE_SPECIAL_CHAR
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class AuthPolicyPrimaryUpdbPatch {
    public static final String JSON_PROPERTY_ALLOWED = "allowed";
    private JsonNullable<Boolean> allowed = JsonNullable.<Boolean>undefined();

    public static final String JSON_PROPERTY_LOCKOUT_DURATION_MINUTES = "lockoutDurationMinutes";
    private JsonNullable<Integer> lockoutDurationMinutes = JsonNullable.<Integer>undefined();

    public static final String JSON_PROPERTY_MAX_ATTEMPTS = "maxAttempts";
    private JsonNullable<Integer> maxAttempts = JsonNullable.<Integer>undefined();

    public static final String JSON_PROPERTY_MIN_PASSWORD_LENGTH = "minPasswordLength";
    private JsonNullable<Integer> minPasswordLength = JsonNullable.<Integer>undefined();

    public static final String JSON_PROPERTY_REQUIRE_MIXED_CASE = "requireMixedCase";
    private JsonNullable<Boolean> requireMixedCase = JsonNullable.<Boolean>undefined();

    public static final String JSON_PROPERTY_REQUIRE_NUMBER_CHAR = "requireNumberChar";
    private JsonNullable<Boolean> requireNumberChar = JsonNullable.<Boolean>undefined();

    public static final String JSON_PROPERTY_REQUIRE_SPECIAL_CHAR = "requireSpecialChar";
    private JsonNullable<Boolean> requireSpecialChar = JsonNullable.<Boolean>undefined();

    public AuthPolicyPrimaryUpdbPatch() {}

    public AuthPolicyPrimaryUpdbPatch allowed(@javax.annotation.Nullable Boolean allowed) {
        this.allowed = JsonNullable.<Boolean>of(allowed);
        return this;
    }

    /**
     * Get allowed
     *
     * @return allowed
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Boolean getAllowed() {
        return allowed.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Boolean> getAllowed_JsonNullable() {
        return allowed;
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED)
    public void setAllowed_JsonNullable(JsonNullable<Boolean> allowed) {
        this.allowed = allowed;
    }

    public void setAllowed(@javax.annotation.Nullable Boolean allowed) {
        this.allowed = JsonNullable.<Boolean>of(allowed);
    }

    public AuthPolicyPrimaryUpdbPatch lockoutDurationMinutes(
            @javax.annotation.Nullable Integer lockoutDurationMinutes) {
        this.lockoutDurationMinutes = JsonNullable.<Integer>of(lockoutDurationMinutes);
        return this;
    }

    /**
     * Get lockoutDurationMinutes
     *
     * @return lockoutDurationMinutes
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Integer getLockoutDurationMinutes() {
        return lockoutDurationMinutes.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_LOCKOUT_DURATION_MINUTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Integer> getLockoutDurationMinutes_JsonNullable() {
        return lockoutDurationMinutes;
    }

    @JsonProperty(JSON_PROPERTY_LOCKOUT_DURATION_MINUTES)
    public void setLockoutDurationMinutes_JsonNullable(
            JsonNullable<Integer> lockoutDurationMinutes) {
        this.lockoutDurationMinutes = lockoutDurationMinutes;
    }

    public void setLockoutDurationMinutes(
            @javax.annotation.Nullable Integer lockoutDurationMinutes) {
        this.lockoutDurationMinutes = JsonNullable.<Integer>of(lockoutDurationMinutes);
    }

    public AuthPolicyPrimaryUpdbPatch maxAttempts(@javax.annotation.Nullable Integer maxAttempts) {
        this.maxAttempts = JsonNullable.<Integer>of(maxAttempts);
        return this;
    }

    /**
     * Get maxAttempts
     *
     * @return maxAttempts
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Integer getMaxAttempts() {
        return maxAttempts.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_MAX_ATTEMPTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Integer> getMaxAttempts_JsonNullable() {
        return maxAttempts;
    }

    @JsonProperty(JSON_PROPERTY_MAX_ATTEMPTS)
    public void setMaxAttempts_JsonNullable(JsonNullable<Integer> maxAttempts) {
        this.maxAttempts = maxAttempts;
    }

    public void setMaxAttempts(@javax.annotation.Nullable Integer maxAttempts) {
        this.maxAttempts = JsonNullable.<Integer>of(maxAttempts);
    }

    public AuthPolicyPrimaryUpdbPatch minPasswordLength(
            @javax.annotation.Nullable Integer minPasswordLength) {
        this.minPasswordLength = JsonNullable.<Integer>of(minPasswordLength);
        return this;
    }

    /**
     * Get minPasswordLength
     *
     * @return minPasswordLength
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Integer getMinPasswordLength() {
        return minPasswordLength.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_MIN_PASSWORD_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Integer> getMinPasswordLength_JsonNullable() {
        return minPasswordLength;
    }

    @JsonProperty(JSON_PROPERTY_MIN_PASSWORD_LENGTH)
    public void setMinPasswordLength_JsonNullable(JsonNullable<Integer> minPasswordLength) {
        this.minPasswordLength = minPasswordLength;
    }

    public void setMinPasswordLength(@javax.annotation.Nullable Integer minPasswordLength) {
        this.minPasswordLength = JsonNullable.<Integer>of(minPasswordLength);
    }

    public AuthPolicyPrimaryUpdbPatch requireMixedCase(
            @javax.annotation.Nullable Boolean requireMixedCase) {
        this.requireMixedCase = JsonNullable.<Boolean>of(requireMixedCase);
        return this;
    }

    /**
     * Get requireMixedCase
     *
     * @return requireMixedCase
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Boolean getRequireMixedCase() {
        return requireMixedCase.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_MIXED_CASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Boolean> getRequireMixedCase_JsonNullable() {
        return requireMixedCase;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_MIXED_CASE)
    public void setRequireMixedCase_JsonNullable(JsonNullable<Boolean> requireMixedCase) {
        this.requireMixedCase = requireMixedCase;
    }

    public void setRequireMixedCase(@javax.annotation.Nullable Boolean requireMixedCase) {
        this.requireMixedCase = JsonNullable.<Boolean>of(requireMixedCase);
    }

    public AuthPolicyPrimaryUpdbPatch requireNumberChar(
            @javax.annotation.Nullable Boolean requireNumberChar) {
        this.requireNumberChar = JsonNullable.<Boolean>of(requireNumberChar);
        return this;
    }

    /**
     * Get requireNumberChar
     *
     * @return requireNumberChar
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Boolean getRequireNumberChar() {
        return requireNumberChar.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_NUMBER_CHAR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Boolean> getRequireNumberChar_JsonNullable() {
        return requireNumberChar;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_NUMBER_CHAR)
    public void setRequireNumberChar_JsonNullable(JsonNullable<Boolean> requireNumberChar) {
        this.requireNumberChar = requireNumberChar;
    }

    public void setRequireNumberChar(@javax.annotation.Nullable Boolean requireNumberChar) {
        this.requireNumberChar = JsonNullable.<Boolean>of(requireNumberChar);
    }

    public AuthPolicyPrimaryUpdbPatch requireSpecialChar(
            @javax.annotation.Nullable Boolean requireSpecialChar) {
        this.requireSpecialChar = JsonNullable.<Boolean>of(requireSpecialChar);
        return this;
    }

    /**
     * Get requireSpecialChar
     *
     * @return requireSpecialChar
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Boolean getRequireSpecialChar() {
        return requireSpecialChar.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_SPECIAL_CHAR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Boolean> getRequireSpecialChar_JsonNullable() {
        return requireSpecialChar;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_SPECIAL_CHAR)
    public void setRequireSpecialChar_JsonNullable(JsonNullable<Boolean> requireSpecialChar) {
        this.requireSpecialChar = requireSpecialChar;
    }

    public void setRequireSpecialChar(@javax.annotation.Nullable Boolean requireSpecialChar) {
        this.requireSpecialChar = JsonNullable.<Boolean>of(requireSpecialChar);
    }

    /** Return true if this authPolicyPrimaryUpdbPatch object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthPolicyPrimaryUpdbPatch authPolicyPrimaryUpdbPatch = (AuthPolicyPrimaryUpdbPatch) o;
        return equalsNullable(this.allowed, authPolicyPrimaryUpdbPatch.allowed)
                && equalsNullable(
                        this.lockoutDurationMinutes,
                        authPolicyPrimaryUpdbPatch.lockoutDurationMinutes)
                && equalsNullable(this.maxAttempts, authPolicyPrimaryUpdbPatch.maxAttempts)
                && equalsNullable(
                        this.minPasswordLength, authPolicyPrimaryUpdbPatch.minPasswordLength)
                && equalsNullable(
                        this.requireMixedCase, authPolicyPrimaryUpdbPatch.requireMixedCase)
                && equalsNullable(
                        this.requireNumberChar, authPolicyPrimaryUpdbPatch.requireNumberChar)
                && equalsNullable(
                        this.requireSpecialChar, authPolicyPrimaryUpdbPatch.requireSpecialChar);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                hashCodeNullable(allowed),
                hashCodeNullable(lockoutDurationMinutes),
                hashCodeNullable(maxAttempts),
                hashCodeNullable(minPasswordLength),
                hashCodeNullable(requireMixedCase),
                hashCodeNullable(requireNumberChar),
                hashCodeNullable(requireSpecialChar));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthPolicyPrimaryUpdbPatch {\n");
        sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
        sb.append("    lockoutDurationMinutes: ")
                .append(toIndentedString(lockoutDurationMinutes))
                .append("\n");
        sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
        sb.append("    minPasswordLength: ")
                .append(toIndentedString(minPasswordLength))
                .append("\n");
        sb.append("    requireMixedCase: ").append(toIndentedString(requireMixedCase)).append("\n");
        sb.append("    requireNumberChar: ")
                .append(toIndentedString(requireNumberChar))
                .append("\n");
        sb.append("    requireSpecialChar: ")
                .append(toIndentedString(requireSpecialChar))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `allowed` to the URL query string
        if (getAllowed() != null) {
            joiner.add(
                    String.format(
                            "%sallowed%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAllowed()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `lockoutDurationMinutes` to the URL query string
        if (getLockoutDurationMinutes() != null) {
            joiner.add(
                    String.format(
                            "%slockoutDurationMinutes%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLockoutDurationMinutes()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `maxAttempts` to the URL query string
        if (getMaxAttempts() != null) {
            joiner.add(
                    String.format(
                            "%smaxAttempts%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMaxAttempts()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `minPasswordLength` to the URL query string
        if (getMinPasswordLength() != null) {
            joiner.add(
                    String.format(
                            "%sminPasswordLength%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMinPasswordLength()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireMixedCase` to the URL query string
        if (getRequireMixedCase() != null) {
            joiner.add(
                    String.format(
                            "%srequireMixedCase%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireMixedCase()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireNumberChar` to the URL query string
        if (getRequireNumberChar() != null) {
            joiner.add(
                    String.format(
                            "%srequireNumberChar%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireNumberChar()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireSpecialChar` to the URL query string
        if (getRequireSpecialChar() != null) {
            joiner.add(
                    String.format(
                            "%srequireSpecialChar%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireSpecialChar()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
