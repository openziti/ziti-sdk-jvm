/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openziti.management.ApiClient;

/** AuthPolicyPrimaryExtJwtPatch */
@JsonPropertyOrder({
    AuthPolicyPrimaryExtJwtPatch.JSON_PROPERTY_ALLOWED,
    AuthPolicyPrimaryExtJwtPatch.JSON_PROPERTY_ALLOWED_SIGNERS
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class AuthPolicyPrimaryExtJwtPatch {
    public static final String JSON_PROPERTY_ALLOWED = "allowed";
    private JsonNullable<Boolean> allowed = JsonNullable.<Boolean>undefined();

    public static final String JSON_PROPERTY_ALLOWED_SIGNERS = "allowedSigners";
    private JsonNullable<List<String>> allowedSigners = JsonNullable.<List<String>>undefined();

    public AuthPolicyPrimaryExtJwtPatch() {}

    public AuthPolicyPrimaryExtJwtPatch allowed(@javax.annotation.Nullable Boolean allowed) {
        this.allowed = JsonNullable.<Boolean>of(allowed);
        return this;
    }

    /**
     * Get allowed
     *
     * @return allowed
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Boolean getAllowed() {
        return allowed.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Boolean> getAllowed_JsonNullable() {
        return allowed;
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED)
    public void setAllowed_JsonNullable(JsonNullable<Boolean> allowed) {
        this.allowed = allowed;
    }

    public void setAllowed(@javax.annotation.Nullable Boolean allowed) {
        this.allowed = JsonNullable.<Boolean>of(allowed);
    }

    public AuthPolicyPrimaryExtJwtPatch allowedSigners(
            @javax.annotation.Nullable List<String> allowedSigners) {
        this.allowedSigners = JsonNullable.<List<String>>of(allowedSigners);
        return this;
    }

    public AuthPolicyPrimaryExtJwtPatch addAllowedSignersItem(String allowedSignersItem) {
        if (this.allowedSigners == null || !this.allowedSigners.isPresent()) {
            this.allowedSigners = JsonNullable.<List<String>>of(new ArrayList<>());
        }
        try {
            this.allowedSigners.get().add(allowedSignersItem);
        } catch (java.util.NoSuchElementException e) {
            // this can never happen, as we make sure above that the value is present
        }
        return this;
    }

    /**
     * Get allowedSigners
     *
     * @return allowedSigners
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public List<String> getAllowedSigners() {
        return allowedSigners.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED_SIGNERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<List<String>> getAllowedSigners_JsonNullable() {
        return allowedSigners;
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED_SIGNERS)
    public void setAllowedSigners_JsonNullable(JsonNullable<List<String>> allowedSigners) {
        this.allowedSigners = allowedSigners;
    }

    public void setAllowedSigners(@javax.annotation.Nullable List<String> allowedSigners) {
        this.allowedSigners = JsonNullable.<List<String>>of(allowedSigners);
    }

    /** Return true if this authPolicyPrimaryExtJwtPatch object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthPolicyPrimaryExtJwtPatch authPolicyPrimaryExtJwtPatch =
                (AuthPolicyPrimaryExtJwtPatch) o;
        return equalsNullable(this.allowed, authPolicyPrimaryExtJwtPatch.allowed)
                && equalsNullable(this.allowedSigners, authPolicyPrimaryExtJwtPatch.allowedSigners);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(hashCodeNullable(allowed), hashCodeNullable(allowedSigners));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthPolicyPrimaryExtJwtPatch {\n");
        sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
        sb.append("    allowedSigners: ").append(toIndentedString(allowedSigners)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `allowed` to the URL query string
        if (getAllowed() != null) {
            joiner.add(
                    String.format(
                            "%sallowed%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAllowed()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `allowedSigners` to the URL query string
        if (getAllowedSigners() != null) {
            for (int i = 0; i < getAllowedSigners().size(); i++) {
                joiner.add(
                        String.format(
                                "%sallowedSigners%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(getAllowedSigners().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        return joiner.toString();
    }
}
