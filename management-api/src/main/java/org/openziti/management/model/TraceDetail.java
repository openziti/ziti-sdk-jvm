/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;

/** TraceDetail */
@JsonPropertyOrder({
    TraceDetail.JSON_PROPERTY_ENABLED,
    TraceDetail.JSON_PROPERTY_TRACE_ID,
    TraceDetail.JSON_PROPERTY_UNTIL
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class TraceDetail {
    public static final String JSON_PROPERTY_ENABLED = "enabled";
    @javax.annotation.Nullable private Boolean enabled;

    public static final String JSON_PROPERTY_TRACE_ID = "traceId";
    @javax.annotation.Nullable private String traceId;

    public static final String JSON_PROPERTY_UNTIL = "until";
    @javax.annotation.Nullable private OffsetDateTime until;

    public TraceDetail() {}

    public TraceDetail enabled(@javax.annotation.Nullable Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getEnabled() {
        return enabled;
    }

    @JsonProperty(JSON_PROPERTY_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
        this.enabled = enabled;
    }

    public TraceDetail traceId(@javax.annotation.Nullable String traceId) {
        this.traceId = traceId;
        return this;
    }

    /**
     * Get traceId
     *
     * @return traceId
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TRACE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTraceId() {
        return traceId;
    }

    @JsonProperty(JSON_PROPERTY_TRACE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTraceId(@javax.annotation.Nullable String traceId) {
        this.traceId = traceId;
    }

    public TraceDetail until(@javax.annotation.Nullable OffsetDateTime until) {
        this.until = until;
        return this;
    }

    /**
     * Get until
     *
     * @return until
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UNTIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OffsetDateTime getUntil() {
        return until;
    }

    @JsonProperty(JSON_PROPERTY_UNTIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUntil(@javax.annotation.Nullable OffsetDateTime until) {
        this.until = until;
    }

    /** Return true if this traceDetail object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TraceDetail traceDetail = (TraceDetail) o;
        return Objects.equals(this.enabled, traceDetail.enabled)
                && Objects.equals(this.traceId, traceDetail.traceId)
                && Objects.equals(this.until, traceDetail.until);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enabled, traceId, until);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TraceDetail {\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
        sb.append("    until: ").append(toIndentedString(until)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `enabled` to the URL query string
        if (getEnabled() != null) {
            joiner.add(
                    String.format(
                            "%senabled%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getEnabled()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `traceId` to the URL query string
        if (getTraceId() != null) {
            joiner.add(
                    String.format(
                            "%straceId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTraceId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `until` to the URL query string
        if (getUntil() != null) {
            joiner.add(
                    String.format(
                            "%suntil%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getUntil()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
