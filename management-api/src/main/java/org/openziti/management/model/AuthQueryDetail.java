/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;

/** AuthQueryDetail */
@JsonPropertyOrder({
    AuthQueryDetail.JSON_PROPERTY_CLIENT_ID,
    AuthQueryDetail.JSON_PROPERTY_FORMAT,
    AuthQueryDetail.JSON_PROPERTY_HTTP_METHOD,
    AuthQueryDetail.JSON_PROPERTY_HTTP_URL,
    AuthQueryDetail.JSON_PROPERTY_ID,
    AuthQueryDetail.JSON_PROPERTY_MAX_LENGTH,
    AuthQueryDetail.JSON_PROPERTY_MIN_LENGTH,
    AuthQueryDetail.JSON_PROPERTY_PROVIDER,
    AuthQueryDetail.JSON_PROPERTY_SCOPES,
    AuthQueryDetail.JSON_PROPERTY_TYPE_ID
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class AuthQueryDetail {
    public static final String JSON_PROPERTY_CLIENT_ID = "clientId";
    @javax.annotation.Nullable private String clientId;

    public static final String JSON_PROPERTY_FORMAT = "format";
    @javax.annotation.Nullable private MfaFormats format;

    public static final String JSON_PROPERTY_HTTP_METHOD = "httpMethod";
    @javax.annotation.Nullable private String httpMethod;

    public static final String JSON_PROPERTY_HTTP_URL = "httpUrl";
    @javax.annotation.Nullable private String httpUrl;

    public static final String JSON_PROPERTY_ID = "id";
    @javax.annotation.Nullable private String id;

    public static final String JSON_PROPERTY_MAX_LENGTH = "maxLength";
    @javax.annotation.Nullable private Integer maxLength;

    public static final String JSON_PROPERTY_MIN_LENGTH = "minLength";
    @javax.annotation.Nullable private Integer minLength;

    public static final String JSON_PROPERTY_PROVIDER = "provider";
    @javax.annotation.Nonnull private MfaProviders provider;

    public static final String JSON_PROPERTY_SCOPES = "scopes";
    @javax.annotation.Nullable private List<String> scopes = new ArrayList<>();

    public static final String JSON_PROPERTY_TYPE_ID = "typeId";
    @javax.annotation.Nullable private AuthQueryType typeId;

    public AuthQueryDetail() {}

    public AuthQueryDetail clientId(@javax.annotation.Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get clientId
     *
     * @return clientId
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getClientId() {
        return clientId;
    }

    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setClientId(@javax.annotation.Nullable String clientId) {
        this.clientId = clientId;
    }

    public AuthQueryDetail format(@javax.annotation.Nullable MfaFormats format) {
        this.format = format;
        return this;
    }

    /**
     * Get format
     *
     * @return format
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public MfaFormats getFormat() {
        return format;
    }

    @JsonProperty(JSON_PROPERTY_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFormat(@javax.annotation.Nullable MfaFormats format) {
        this.format = format;
    }

    public AuthQueryDetail httpMethod(@javax.annotation.Nullable String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get httpMethod
     *
     * @return httpMethod
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_HTTP_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getHttpMethod() {
        return httpMethod;
    }

    @JsonProperty(JSON_PROPERTY_HTTP_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHttpMethod(@javax.annotation.Nullable String httpMethod) {
        this.httpMethod = httpMethod;
    }

    public AuthQueryDetail httpUrl(@javax.annotation.Nullable String httpUrl) {
        this.httpUrl = httpUrl;
        return this;
    }

    /**
     * Get httpUrl
     *
     * @return httpUrl
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_HTTP_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getHttpUrl() {
        return httpUrl;
    }

    @JsonProperty(JSON_PROPERTY_HTTP_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHttpUrl(@javax.annotation.Nullable String httpUrl) {
        this.httpUrl = httpUrl;
    }

    public AuthQueryDetail id(@javax.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(@javax.annotation.Nullable String id) {
        this.id = id;
    }

    public AuthQueryDetail maxLength(@javax.annotation.Nullable Integer maxLength) {
        this.maxLength = maxLength;
        return this;
    }

    /**
     * Get maxLength
     *
     * @return maxLength
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMaxLength() {
        return maxLength;
    }

    @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMaxLength(@javax.annotation.Nullable Integer maxLength) {
        this.maxLength = maxLength;
    }

    public AuthQueryDetail minLength(@javax.annotation.Nullable Integer minLength) {
        this.minLength = minLength;
        return this;
    }

    /**
     * Get minLength
     *
     * @return minLength
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMinLength() {
        return minLength;
    }

    @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMinLength(@javax.annotation.Nullable Integer minLength) {
        this.minLength = minLength;
    }

    public AuthQueryDetail provider(@javax.annotation.Nonnull MfaProviders provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get provider
     *
     * @return provider
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public MfaProviders getProvider() {
        return provider;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProvider(@javax.annotation.Nonnull MfaProviders provider) {
        this.provider = provider;
    }

    public AuthQueryDetail scopes(@javax.annotation.Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    public AuthQueryDetail addScopesItem(String scopesItem) {
        if (this.scopes == null) {
            this.scopes = new ArrayList<>();
        }
        this.scopes.add(scopesItem);
        return this;
    }

    /**
     * Get scopes
     *
     * @return scopes
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getScopes() {
        return scopes;
    }

    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScopes(@javax.annotation.Nullable List<String> scopes) {
        this.scopes = scopes;
    }

    public AuthQueryDetail typeId(@javax.annotation.Nullable AuthQueryType typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Get typeId
     *
     * @return typeId
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AuthQueryType getTypeId() {
        return typeId;
    }

    @JsonProperty(JSON_PROPERTY_TYPE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTypeId(@javax.annotation.Nullable AuthQueryType typeId) {
        this.typeId = typeId;
    }

    /** Return true if this authQueryDetail object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthQueryDetail authQueryDetail = (AuthQueryDetail) o;
        return Objects.equals(this.clientId, authQueryDetail.clientId)
                && Objects.equals(this.format, authQueryDetail.format)
                && Objects.equals(this.httpMethod, authQueryDetail.httpMethod)
                && Objects.equals(this.httpUrl, authQueryDetail.httpUrl)
                && Objects.equals(this.id, authQueryDetail.id)
                && Objects.equals(this.maxLength, authQueryDetail.maxLength)
                && Objects.equals(this.minLength, authQueryDetail.minLength)
                && Objects.equals(this.provider, authQueryDetail.provider)
                && Objects.equals(this.scopes, authQueryDetail.scopes)
                && Objects.equals(this.typeId, authQueryDetail.typeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                clientId,
                format,
                httpMethod,
                httpUrl,
                id,
                maxLength,
                minLength,
                provider,
                scopes,
                typeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthQueryDetail {\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    format: ").append(toIndentedString(format)).append("\n");
        sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
        sb.append("    httpUrl: ").append(toIndentedString(httpUrl)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
        sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
        sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
        sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `clientId` to the URL query string
        if (getClientId() != null) {
            joiner.add(
                    String.format(
                            "%sclientId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getClientId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `format` to the URL query string
        if (getFormat() != null) {
            joiner.add(
                    String.format(
                            "%sformat%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getFormat()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `httpMethod` to the URL query string
        if (getHttpMethod() != null) {
            joiner.add(
                    String.format(
                            "%shttpMethod%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getHttpMethod()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `httpUrl` to the URL query string
        if (getHttpUrl() != null) {
            joiner.add(
                    String.format(
                            "%shttpUrl%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getHttpUrl()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `maxLength` to the URL query string
        if (getMaxLength() != null) {
            joiner.add(
                    String.format(
                            "%smaxLength%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMaxLength()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `minLength` to the URL query string
        if (getMinLength() != null) {
            joiner.add(
                    String.format(
                            "%sminLength%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMinLength()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `provider` to the URL query string
        if (getProvider() != null) {
            joiner.add(
                    String.format(
                            "%sprovider%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getProvider()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `scopes` to the URL query string
        if (getScopes() != null) {
            for (int i = 0; i < getScopes().size(); i++) {
                joiner.add(
                        String.format(
                                "%sscopes%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(getScopes().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `typeId` to the URL query string
        if (getTypeId() != null) {
            joiner.add(
                    String.format(
                            "%stypeId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTypeId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
