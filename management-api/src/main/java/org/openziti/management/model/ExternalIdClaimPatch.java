/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Objects;
import java.util.StringJoiner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openziti.management.ApiClient;

/** ExternalIdClaimPatch */
@JsonPropertyOrder({
    ExternalIdClaimPatch.JSON_PROPERTY_INDEX,
    ExternalIdClaimPatch.JSON_PROPERTY_LOCATION,
    ExternalIdClaimPatch.JSON_PROPERTY_MATCHER,
    ExternalIdClaimPatch.JSON_PROPERTY_MATCHER_CRITERIA,
    ExternalIdClaimPatch.JSON_PROPERTY_PARSER,
    ExternalIdClaimPatch.JSON_PROPERTY_PARSER_CRITERIA
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class ExternalIdClaimPatch {
    public static final String JSON_PROPERTY_INDEX = "index";
    private JsonNullable<Integer> index = JsonNullable.<Integer>undefined();

    /** Gets or Sets location */
    public enum LocationEnum {
        COMMON_NAME(String.valueOf("COMMON_NAME")),

        SAN_URI(String.valueOf("SAN_URI")),

        SAN_EMAIL(String.valueOf("SAN_EMAIL"));

        private String value;

        LocationEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static LocationEnum fromValue(String value) {
            for (LocationEnum b : LocationEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }

    public static final String JSON_PROPERTY_LOCATION = "location";
    private JsonNullable<LocationEnum> location = JsonNullable.<LocationEnum>undefined();

    /** Gets or Sets matcher */
    public enum MatcherEnum {
        ALL(String.valueOf("ALL")),

        PREFIX(String.valueOf("PREFIX")),

        SUFFIX(String.valueOf("SUFFIX")),

        SCHEME(String.valueOf("SCHEME"));

        private String value;

        MatcherEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static MatcherEnum fromValue(String value) {
            for (MatcherEnum b : MatcherEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }

    public static final String JSON_PROPERTY_MATCHER = "matcher";
    private JsonNullable<MatcherEnum> matcher = JsonNullable.<MatcherEnum>undefined();

    public static final String JSON_PROPERTY_MATCHER_CRITERIA = "matcherCriteria";
    private JsonNullable<String> matcherCriteria = JsonNullable.<String>undefined();

    /** Gets or Sets parser */
    public enum ParserEnum {
        NONE(String.valueOf("NONE")),

        SPLIT(String.valueOf("SPLIT"));

        private String value;

        ParserEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ParserEnum fromValue(String value) {
            for (ParserEnum b : ParserEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }

    public static final String JSON_PROPERTY_PARSER = "parser";
    private JsonNullable<ParserEnum> parser = JsonNullable.<ParserEnum>undefined();

    public static final String JSON_PROPERTY_PARSER_CRITERIA = "parserCriteria";
    private JsonNullable<String> parserCriteria = JsonNullable.<String>undefined();

    public ExternalIdClaimPatch() {}

    public ExternalIdClaimPatch index(@javax.annotation.Nullable Integer index) {
        this.index = JsonNullable.<Integer>of(index);
        return this;
    }

    /**
     * Get index
     *
     * @return index
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public Integer getIndex() {
        return index.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Integer> getIndex_JsonNullable() {
        return index;
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    public void setIndex_JsonNullable(JsonNullable<Integer> index) {
        this.index = index;
    }

    public void setIndex(@javax.annotation.Nullable Integer index) {
        this.index = JsonNullable.<Integer>of(index);
    }

    public ExternalIdClaimPatch location(@javax.annotation.Nullable LocationEnum location) {
        this.location = JsonNullable.<LocationEnum>of(location);
        return this;
    }

    /**
     * Get location
     *
     * @return location
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public LocationEnum getLocation() {
        return location.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_LOCATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<LocationEnum> getLocation_JsonNullable() {
        return location;
    }

    @JsonProperty(JSON_PROPERTY_LOCATION)
    public void setLocation_JsonNullable(JsonNullable<LocationEnum> location) {
        this.location = location;
    }

    public void setLocation(@javax.annotation.Nullable LocationEnum location) {
        this.location = JsonNullable.<LocationEnum>of(location);
    }

    public ExternalIdClaimPatch matcher(@javax.annotation.Nullable MatcherEnum matcher) {
        this.matcher = JsonNullable.<MatcherEnum>of(matcher);
        return this;
    }

    /**
     * Get matcher
     *
     * @return matcher
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public MatcherEnum getMatcher() {
        return matcher.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_MATCHER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<MatcherEnum> getMatcher_JsonNullable() {
        return matcher;
    }

    @JsonProperty(JSON_PROPERTY_MATCHER)
    public void setMatcher_JsonNullable(JsonNullable<MatcherEnum> matcher) {
        this.matcher = matcher;
    }

    public void setMatcher(@javax.annotation.Nullable MatcherEnum matcher) {
        this.matcher = JsonNullable.<MatcherEnum>of(matcher);
    }

    public ExternalIdClaimPatch matcherCriteria(@javax.annotation.Nullable String matcherCriteria) {
        this.matcherCriteria = JsonNullable.<String>of(matcherCriteria);
        return this;
    }

    /**
     * Get matcherCriteria
     *
     * @return matcherCriteria
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public String getMatcherCriteria() {
        return matcherCriteria.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_MATCHER_CRITERIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<String> getMatcherCriteria_JsonNullable() {
        return matcherCriteria;
    }

    @JsonProperty(JSON_PROPERTY_MATCHER_CRITERIA)
    public void setMatcherCriteria_JsonNullable(JsonNullable<String> matcherCriteria) {
        this.matcherCriteria = matcherCriteria;
    }

    public void setMatcherCriteria(@javax.annotation.Nullable String matcherCriteria) {
        this.matcherCriteria = JsonNullable.<String>of(matcherCriteria);
    }

    public ExternalIdClaimPatch parser(@javax.annotation.Nullable ParserEnum parser) {
        this.parser = JsonNullable.<ParserEnum>of(parser);
        return this;
    }

    /**
     * Get parser
     *
     * @return parser
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public ParserEnum getParser() {
        return parser.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_PARSER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<ParserEnum> getParser_JsonNullable() {
        return parser;
    }

    @JsonProperty(JSON_PROPERTY_PARSER)
    public void setParser_JsonNullable(JsonNullable<ParserEnum> parser) {
        this.parser = parser;
    }

    public void setParser(@javax.annotation.Nullable ParserEnum parser) {
        this.parser = JsonNullable.<ParserEnum>of(parser);
    }

    public ExternalIdClaimPatch parserCriteria(@javax.annotation.Nullable String parserCriteria) {
        this.parserCriteria = JsonNullable.<String>of(parserCriteria);
        return this;
    }

    /**
     * Get parserCriteria
     *
     * @return parserCriteria
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public String getParserCriteria() {
        return parserCriteria.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_PARSER_CRITERIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<String> getParserCriteria_JsonNullable() {
        return parserCriteria;
    }

    @JsonProperty(JSON_PROPERTY_PARSER_CRITERIA)
    public void setParserCriteria_JsonNullable(JsonNullable<String> parserCriteria) {
        this.parserCriteria = parserCriteria;
    }

    public void setParserCriteria(@javax.annotation.Nullable String parserCriteria) {
        this.parserCriteria = JsonNullable.<String>of(parserCriteria);
    }

    /** Return true if this externalIdClaimPatch object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalIdClaimPatch externalIdClaimPatch = (ExternalIdClaimPatch) o;
        return equalsNullable(this.index, externalIdClaimPatch.index)
                && equalsNullable(this.location, externalIdClaimPatch.location)
                && equalsNullable(this.matcher, externalIdClaimPatch.matcher)
                && equalsNullable(this.matcherCriteria, externalIdClaimPatch.matcherCriteria)
                && equalsNullable(this.parser, externalIdClaimPatch.parser)
                && equalsNullable(this.parserCriteria, externalIdClaimPatch.parserCriteria);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                hashCodeNullable(index),
                hashCodeNullable(location),
                hashCodeNullable(matcher),
                hashCodeNullable(matcherCriteria),
                hashCodeNullable(parser),
                hashCodeNullable(parserCriteria));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExternalIdClaimPatch {\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
        sb.append("    matcherCriteria: ").append(toIndentedString(matcherCriteria)).append("\n");
        sb.append("    parser: ").append(toIndentedString(parser)).append("\n");
        sb.append("    parserCriteria: ").append(toIndentedString(parserCriteria)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `index` to the URL query string
        if (getIndex() != null) {
            joiner.add(
                    String.format(
                            "%sindex%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getIndex()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `location` to the URL query string
        if (getLocation() != null) {
            joiner.add(
                    String.format(
                            "%slocation%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLocation()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `matcher` to the URL query string
        if (getMatcher() != null) {
            joiner.add(
                    String.format(
                            "%smatcher%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMatcher()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `matcherCriteria` to the URL query string
        if (getMatcherCriteria() != null) {
            joiner.add(
                    String.format(
                            "%smatcherCriteria%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMatcherCriteria()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `parser` to the URL query string
        if (getParser() != null) {
            joiner.add(
                    String.format(
                            "%sparser%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getParser()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `parserCriteria` to the URL query string
        if (getParserCriteria() != null) {
            joiner.add(
                    String.format(
                            "%sparserCriteria%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getParserCriteria()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
