/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

/** PostureData */
@JsonPropertyOrder({
    PostureData.JSON_PROPERTY_API_SESSION_POSTURE_DATA,
    PostureData.JSON_PROPERTY_DOMAIN,
    PostureData.JSON_PROPERTY_MAC,
    PostureData.JSON_PROPERTY_OS,
    PostureData.JSON_PROPERTY_PROCESSES
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class PostureData {
    public static final String JSON_PROPERTY_API_SESSION_POSTURE_DATA = "apiSessionPostureData";

    @javax.annotation.Nonnull
    private Map<String, ApiSessionPostureData> apiSessionPostureData = new HashMap<>();

    public static final String JSON_PROPERTY_DOMAIN = "domain";
    @javax.annotation.Nonnull private PostureDataDomain domain;

    public static final String JSON_PROPERTY_MAC = "mac";
    @javax.annotation.Nonnull private PostureDataMac mac;

    public static final String JSON_PROPERTY_OS = "os";
    @javax.annotation.Nonnull private PostureDataOs os;

    public static final String JSON_PROPERTY_PROCESSES = "processes";
    @javax.annotation.Nonnull private List<PostureDataProcess> processes = new ArrayList<>();

    public PostureData() {}

    public PostureData apiSessionPostureData(
            @javax.annotation.Nonnull Map<String, ApiSessionPostureData> apiSessionPostureData) {
        this.apiSessionPostureData = apiSessionPostureData;
        return this;
    }

    public PostureData putApiSessionPostureDataItem(
            String key, ApiSessionPostureData apiSessionPostureDataItem) {
        if (this.apiSessionPostureData == null) {
            this.apiSessionPostureData = new HashMap<>();
        }
        this.apiSessionPostureData.put(key, apiSessionPostureDataItem);
        return this;
    }

    /**
     * Get apiSessionPostureData
     *
     * @return apiSessionPostureData
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_API_SESSION_POSTURE_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, ApiSessionPostureData> getApiSessionPostureData() {
        return apiSessionPostureData;
    }

    @JsonProperty(JSON_PROPERTY_API_SESSION_POSTURE_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApiSessionPostureData(
            @javax.annotation.Nonnull Map<String, ApiSessionPostureData> apiSessionPostureData) {
        this.apiSessionPostureData = apiSessionPostureData;
    }

    public PostureData domain(@javax.annotation.Nonnull PostureDataDomain domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get domain
     *
     * @return domain
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DOMAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostureDataDomain getDomain() {
        return domain;
    }

    @JsonProperty(JSON_PROPERTY_DOMAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDomain(@javax.annotation.Nonnull PostureDataDomain domain) {
        this.domain = domain;
    }

    public PostureData mac(@javax.annotation.Nonnull PostureDataMac mac) {
        this.mac = mac;
        return this;
    }

    /**
     * Get mac
     *
     * @return mac
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MAC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostureDataMac getMac() {
        return mac;
    }

    @JsonProperty(JSON_PROPERTY_MAC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMac(@javax.annotation.Nonnull PostureDataMac mac) {
        this.mac = mac;
    }

    public PostureData os(@javax.annotation.Nonnull PostureDataOs os) {
        this.os = os;
        return this;
    }

    /**
     * Get os
     *
     * @return os
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostureDataOs getOs() {
        return os;
    }

    @JsonProperty(JSON_PROPERTY_OS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOs(@javax.annotation.Nonnull PostureDataOs os) {
        this.os = os;
    }

    public PostureData processes(@javax.annotation.Nonnull List<PostureDataProcess> processes) {
        this.processes = processes;
        return this;
    }

    public PostureData addProcessesItem(PostureDataProcess processesItem) {
        if (this.processes == null) {
            this.processes = new ArrayList<>();
        }
        this.processes.add(processesItem);
        return this;
    }

    /**
     * Get processes
     *
     * @return processes
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROCESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<PostureDataProcess> getProcesses() {
        return processes;
    }

    @JsonProperty(JSON_PROPERTY_PROCESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProcesses(@javax.annotation.Nonnull List<PostureDataProcess> processes) {
        this.processes = processes;
    }

    /** Return true if this postureData object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureData postureData = (PostureData) o;
        return Objects.equals(this.apiSessionPostureData, postureData.apiSessionPostureData)
                && Objects.equals(this.domain, postureData.domain)
                && Objects.equals(this.mac, postureData.mac)
                && Objects.equals(this.os, postureData.os)
                && Objects.equals(this.processes, postureData.processes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(apiSessionPostureData, domain, mac, os, processes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureData {\n");
        sb.append("    apiSessionPostureData: ")
                .append(toIndentedString(apiSessionPostureData))
                .append("\n");
        sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
        sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
        sb.append("    os: ").append(toIndentedString(os)).append("\n");
        sb.append("    processes: ").append(toIndentedString(processes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `apiSessionPostureData` to the URL query string
        if (getApiSessionPostureData() != null) {
            for (String _key : getApiSessionPostureData().keySet()) {
                if (getApiSessionPostureData().get(_key) != null) {
                    joiner.add(
                            getApiSessionPostureData()
                                    .get(_key)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sapiSessionPostureData%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    _key,
                                                                    containerSuffix))));
                }
            }
        }

        // add `domain` to the URL query string
        if (getDomain() != null) {
            joiner.add(getDomain().toUrlQueryString(prefix + "domain" + suffix));
        }

        // add `mac` to the URL query string
        if (getMac() != null) {
            joiner.add(getMac().toUrlQueryString(prefix + "mac" + suffix));
        }

        // add `os` to the URL query string
        if (getOs() != null) {
            joiner.add(getOs().toUrlQueryString(prefix + "os" + suffix));
        }

        // add `processes` to the URL query string
        if (getProcesses() != null) {
            for (int i = 0; i < getProcesses().size(); i++) {
                if (getProcesses().get(i) != null) {
                    joiner.add(
                            getProcesses()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sprocesses%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
