/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;

/** PostureDataProcess */
@JsonPropertyOrder({
    PostureDataProcess.JSON_PROPERTY_LAST_UPDATED_AT,
    PostureDataProcess.JSON_PROPERTY_POSTURE_CHECK_ID,
    PostureDataProcess.JSON_PROPERTY_TIMED_OUT,
    PostureDataProcess.JSON_PROPERTY_BINARY_HASH,
    PostureDataProcess.JSON_PROPERTY_IS_RUNNING,
    PostureDataProcess.JSON_PROPERTY_SIGNER_FINGERPRINTS
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class PostureDataProcess {
    public static final String JSON_PROPERTY_LAST_UPDATED_AT = "lastUpdatedAt";
    @javax.annotation.Nonnull private OffsetDateTime lastUpdatedAt;

    public static final String JSON_PROPERTY_POSTURE_CHECK_ID = "postureCheckId";
    @javax.annotation.Nonnull private String postureCheckId;

    public static final String JSON_PROPERTY_TIMED_OUT = "timedOut";
    @javax.annotation.Nonnull private Boolean timedOut;

    public static final String JSON_PROPERTY_BINARY_HASH = "binaryHash";
    @javax.annotation.Nullable private String binaryHash;

    public static final String JSON_PROPERTY_IS_RUNNING = "isRunning";
    @javax.annotation.Nullable private Boolean isRunning;

    public static final String JSON_PROPERTY_SIGNER_FINGERPRINTS = "signerFingerprints";
    @javax.annotation.Nullable private List<String> signerFingerprints = new ArrayList<>();

    public PostureDataProcess() {}

    public PostureDataProcess lastUpdatedAt(
            @javax.annotation.Nonnull OffsetDateTime lastUpdatedAt) {
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }

    /**
     * Get lastUpdatedAt
     *
     * @return lastUpdatedAt
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LAST_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getLastUpdatedAt() {
        return lastUpdatedAt;
    }

    @JsonProperty(JSON_PROPERTY_LAST_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLastUpdatedAt(@javax.annotation.Nonnull OffsetDateTime lastUpdatedAt) {
        this.lastUpdatedAt = lastUpdatedAt;
    }

    public PostureDataProcess postureCheckId(@javax.annotation.Nonnull String postureCheckId) {
        this.postureCheckId = postureCheckId;
        return this;
    }

    /**
     * Get postureCheckId
     *
     * @return postureCheckId
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_POSTURE_CHECK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getPostureCheckId() {
        return postureCheckId;
    }

    @JsonProperty(JSON_PROPERTY_POSTURE_CHECK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPostureCheckId(@javax.annotation.Nonnull String postureCheckId) {
        this.postureCheckId = postureCheckId;
    }

    public PostureDataProcess timedOut(@javax.annotation.Nonnull Boolean timedOut) {
        this.timedOut = timedOut;
        return this;
    }

    /**
     * Get timedOut
     *
     * @return timedOut
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIMED_OUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTimedOut() {
        return timedOut;
    }

    @JsonProperty(JSON_PROPERTY_TIMED_OUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimedOut(@javax.annotation.Nonnull Boolean timedOut) {
        this.timedOut = timedOut;
    }

    public PostureDataProcess binaryHash(@javax.annotation.Nullable String binaryHash) {
        this.binaryHash = binaryHash;
        return this;
    }

    /**
     * Get binaryHash
     *
     * @return binaryHash
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BINARY_HASH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBinaryHash() {
        return binaryHash;
    }

    @JsonProperty(JSON_PROPERTY_BINARY_HASH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBinaryHash(@javax.annotation.Nullable String binaryHash) {
        this.binaryHash = binaryHash;
    }

    public PostureDataProcess isRunning(@javax.annotation.Nullable Boolean isRunning) {
        this.isRunning = isRunning;
        return this;
    }

    /**
     * Get isRunning
     *
     * @return isRunning
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IS_RUNNING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsRunning() {
        return isRunning;
    }

    @JsonProperty(JSON_PROPERTY_IS_RUNNING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsRunning(@javax.annotation.Nullable Boolean isRunning) {
        this.isRunning = isRunning;
    }

    public PostureDataProcess signerFingerprints(
            @javax.annotation.Nullable List<String> signerFingerprints) {
        this.signerFingerprints = signerFingerprints;
        return this;
    }

    public PostureDataProcess addSignerFingerprintsItem(String signerFingerprintsItem) {
        if (this.signerFingerprints == null) {
            this.signerFingerprints = new ArrayList<>();
        }
        this.signerFingerprints.add(signerFingerprintsItem);
        return this;
    }

    /**
     * Get signerFingerprints
     *
     * @return signerFingerprints
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SIGNER_FINGERPRINTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getSignerFingerprints() {
        return signerFingerprints;
    }

    @JsonProperty(JSON_PROPERTY_SIGNER_FINGERPRINTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSignerFingerprints(@javax.annotation.Nullable List<String> signerFingerprints) {
        this.signerFingerprints = signerFingerprints;
    }

    /** Return true if this postureDataProcess object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureDataProcess postureDataProcess = (PostureDataProcess) o;
        return Objects.equals(this.lastUpdatedAt, postureDataProcess.lastUpdatedAt)
                && Objects.equals(this.postureCheckId, postureDataProcess.postureCheckId)
                && Objects.equals(this.timedOut, postureDataProcess.timedOut)
                && Objects.equals(this.binaryHash, postureDataProcess.binaryHash)
                && Objects.equals(this.isRunning, postureDataProcess.isRunning)
                && Objects.equals(this.signerFingerprints, postureDataProcess.signerFingerprints);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                lastUpdatedAt, postureCheckId, timedOut, binaryHash, isRunning, signerFingerprints);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureDataProcess {\n");
        sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
        sb.append("    postureCheckId: ").append(toIndentedString(postureCheckId)).append("\n");
        sb.append("    timedOut: ").append(toIndentedString(timedOut)).append("\n");
        sb.append("    binaryHash: ").append(toIndentedString(binaryHash)).append("\n");
        sb.append("    isRunning: ").append(toIndentedString(isRunning)).append("\n");
        sb.append("    signerFingerprints: ")
                .append(toIndentedString(signerFingerprints))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `lastUpdatedAt` to the URL query string
        if (getLastUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%slastUpdatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLastUpdatedAt()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `postureCheckId` to the URL query string
        if (getPostureCheckId() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `timedOut` to the URL query string
        if (getTimedOut() != null) {
            joiner.add(
                    String.format(
                            "%stimedOut%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTimedOut()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `binaryHash` to the URL query string
        if (getBinaryHash() != null) {
            joiner.add(
                    String.format(
                            "%sbinaryHash%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getBinaryHash()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `isRunning` to the URL query string
        if (getIsRunning() != null) {
            joiner.add(
                    String.format(
                            "%sisRunning%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getIsRunning()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `signerFingerprints` to the URL query string
        if (getSignerFingerprints() != null) {
            for (int i = 0; i < getSignerFingerprints().size(); i++) {
                joiner.add(
                        String.format(
                                "%ssignerFingerprints%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(
                                                        getSignerFingerprints().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        return joiner.toString();
    }
}
