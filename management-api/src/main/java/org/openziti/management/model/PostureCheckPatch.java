/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openziti.management.ApiClient;
import org.openziti.management.JSON;

/** PostureCheckPatch */
@JsonPropertyOrder({
    PostureCheckPatch.JSON_PROPERTY_NAME,
    PostureCheckPatch.JSON_PROPERTY_ROLE_ATTRIBUTES,
    PostureCheckPatch.JSON_PROPERTY_TAGS,
    PostureCheckPatch.JSON_PROPERTY_TYPE_ID
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
@JsonIgnoreProperties(
        value = "typeId", // ignore manually set typeId, it will be automatically generated by
        // Jackson during serialization
        allowSetters = true // allows the typeId to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "typeId",
        visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = PostureCheckDomainPatch.class, name = "postureCheckDomainPatch"),
    @JsonSubTypes.Type(
            value = PostureCheckMacAddressPatch.class,
            name = "postureCheckMacAddressPatch"),
    @JsonSubTypes.Type(value = PostureCheckMfaPatch.class, name = "postureCheckMfaPatch"),
    @JsonSubTypes.Type(
            value = PostureCheckOperatingSystemPatch.class,
            name = "postureCheckOperatingSystemPatch"),
    @JsonSubTypes.Type(
            value = PostureCheckProcessMultiPatch.class,
            name = "postureCheckProcessMultiPatch"),
    @JsonSubTypes.Type(value = PostureCheckProcessPatch.class, name = "postureCheckProcessPatch"),
})
public class PostureCheckPatch {
    public static final String JSON_PROPERTY_NAME = "name";
    @javax.annotation.Nullable private String name;

    public static final String JSON_PROPERTY_ROLE_ATTRIBUTES = "roleAttributes";
    private JsonNullable<List<String>> roleAttributes = JsonNullable.<List<String>>undefined();

    public static final String JSON_PROPERTY_TAGS = "tags";
    @javax.annotation.Nullable private Tags tags;

    public static final String JSON_PROPERTY_TYPE_ID = "typeId";
    @javax.annotation.Nonnull private PostureCheckType typeId;

    public PostureCheckPatch() {}

    public PostureCheckPatch name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }

    public PostureCheckPatch roleAttributes(
            @javax.annotation.Nullable List<String> roleAttributes) {
        this.roleAttributes = JsonNullable.<List<String>>of(roleAttributes);
        return this;
    }

    public PostureCheckPatch addRoleAttributesItem(String roleAttributesItem) {
        if (this.roleAttributes == null || !this.roleAttributes.isPresent()) {
            this.roleAttributes = JsonNullable.<List<String>>of(new ArrayList<>());
        }
        try {
            this.roleAttributes.get().add(roleAttributesItem);
        } catch (java.util.NoSuchElementException e) {
            // this can never happen, as we make sure above that the value is present
        }
        return this;
    }

    /**
     * A set of strings used to loosly couple this resource to policies
     *
     * @return roleAttributes
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public List<String> getRoleAttributes() {
        return roleAttributes.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ROLE_ATTRIBUTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<List<String>> getRoleAttributes_JsonNullable() {
        return roleAttributes;
    }

    @JsonProperty(JSON_PROPERTY_ROLE_ATTRIBUTES)
    public void setRoleAttributes_JsonNullable(JsonNullable<List<String>> roleAttributes) {
        this.roleAttributes = roleAttributes;
    }

    public void setRoleAttributes(@javax.annotation.Nullable List<String> roleAttributes) {
        this.roleAttributes = JsonNullable.<List<String>>of(roleAttributes);
    }

    public PostureCheckPatch tags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get tags
     *
     * @return tags
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Tags getTags() {
        return tags;
    }

    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
    }

    public PostureCheckPatch typeId(@javax.annotation.Nonnull PostureCheckType typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Get typeId
     *
     * @return typeId
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostureCheckType getTypeId() {
        return typeId;
    }

    @JsonProperty(JSON_PROPERTY_TYPE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTypeId(@javax.annotation.Nonnull PostureCheckType typeId) {
        this.typeId = typeId;
    }

    /** Return true if this postureCheckPatch object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureCheckPatch postureCheckPatch = (PostureCheckPatch) o;
        return Objects.equals(this.name, postureCheckPatch.name)
                && equalsNullable(this.roleAttributes, postureCheckPatch.roleAttributes)
                && Objects.equals(this.tags, postureCheckPatch.tags)
                && Objects.equals(this.typeId, postureCheckPatch.typeId);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, hashCodeNullable(roleAttributes), tags, typeId);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureCheckPatch {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    roleAttributes: ").append(toIndentedString(roleAttributes)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `roleAttributes` to the URL query string
        if (getRoleAttributes() != null) {
            for (int i = 0; i < getRoleAttributes().size(); i++) {
                joiner.add(
                        String.format(
                                "%sroleAttributes%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(getRoleAttributes().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `tags` to the URL query string
        if (getTags() != null) {
            joiner.add(getTags().toUrlQueryString(prefix + "tags" + suffix));
        }

        // add `typeId` to the URL query string
        if (getTypeId() != null) {
            joiner.add(
                    String.format(
                            "%stypeId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTypeId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("postureCheckDomainPatch", PostureCheckDomainPatch.class);
        mappings.put("postureCheckMacAddressPatch", PostureCheckMacAddressPatch.class);
        mappings.put("postureCheckMfaPatch", PostureCheckMfaPatch.class);
        mappings.put("postureCheckOperatingSystemPatch", PostureCheckOperatingSystemPatch.class);
        mappings.put("postureCheckProcessMultiPatch", PostureCheckProcessMultiPatch.class);
        mappings.put("postureCheckProcessPatch", PostureCheckProcessPatch.class);
        mappings.put("postureCheckPatch", PostureCheckPatch.class);
        JSON.registerDiscriminator(PostureCheckPatch.class, "typeId", mappings);
    }
}
