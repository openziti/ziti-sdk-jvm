/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;

/** AuthPolicyPrimaryUpdb */
@JsonPropertyOrder({
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_ALLOWED,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_LOCKOUT_DURATION_MINUTES,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_MAX_ATTEMPTS,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_MIN_PASSWORD_LENGTH,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_REQUIRE_MIXED_CASE,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_REQUIRE_NUMBER_CHAR,
    AuthPolicyPrimaryUpdb.JSON_PROPERTY_REQUIRE_SPECIAL_CHAR
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class AuthPolicyPrimaryUpdb {
    public static final String JSON_PROPERTY_ALLOWED = "allowed";
    @javax.annotation.Nonnull private Boolean allowed;

    public static final String JSON_PROPERTY_LOCKOUT_DURATION_MINUTES = "lockoutDurationMinutes";
    @javax.annotation.Nonnull private Integer lockoutDurationMinutes;

    public static final String JSON_PROPERTY_MAX_ATTEMPTS = "maxAttempts";
    @javax.annotation.Nonnull private Integer maxAttempts;

    public static final String JSON_PROPERTY_MIN_PASSWORD_LENGTH = "minPasswordLength";
    @javax.annotation.Nonnull private Integer minPasswordLength;

    public static final String JSON_PROPERTY_REQUIRE_MIXED_CASE = "requireMixedCase";
    @javax.annotation.Nonnull private Boolean requireMixedCase;

    public static final String JSON_PROPERTY_REQUIRE_NUMBER_CHAR = "requireNumberChar";
    @javax.annotation.Nonnull private Boolean requireNumberChar;

    public static final String JSON_PROPERTY_REQUIRE_SPECIAL_CHAR = "requireSpecialChar";
    @javax.annotation.Nonnull private Boolean requireSpecialChar;

    public AuthPolicyPrimaryUpdb() {}

    public AuthPolicyPrimaryUpdb allowed(@javax.annotation.Nonnull Boolean allowed) {
        this.allowed = allowed;
        return this;
    }

    /**
     * Get allowed
     *
     * @return allowed
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getAllowed() {
        return allowed;
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAllowed(@javax.annotation.Nonnull Boolean allowed) {
        this.allowed = allowed;
    }

    public AuthPolicyPrimaryUpdb lockoutDurationMinutes(
            @javax.annotation.Nonnull Integer lockoutDurationMinutes) {
        this.lockoutDurationMinutes = lockoutDurationMinutes;
        return this;
    }

    /**
     * Get lockoutDurationMinutes
     *
     * @return lockoutDurationMinutes
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOCKOUT_DURATION_MINUTES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getLockoutDurationMinutes() {
        return lockoutDurationMinutes;
    }

    @JsonProperty(JSON_PROPERTY_LOCKOUT_DURATION_MINUTES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLockoutDurationMinutes(
            @javax.annotation.Nonnull Integer lockoutDurationMinutes) {
        this.lockoutDurationMinutes = lockoutDurationMinutes;
    }

    public AuthPolicyPrimaryUpdb maxAttempts(@javax.annotation.Nonnull Integer maxAttempts) {
        this.maxAttempts = maxAttempts;
        return this;
    }

    /**
     * Get maxAttempts
     *
     * @return maxAttempts
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MAX_ATTEMPTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getMaxAttempts() {
        return maxAttempts;
    }

    @JsonProperty(JSON_PROPERTY_MAX_ATTEMPTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMaxAttempts(@javax.annotation.Nonnull Integer maxAttempts) {
        this.maxAttempts = maxAttempts;
    }

    public AuthPolicyPrimaryUpdb minPasswordLength(
            @javax.annotation.Nonnull Integer minPasswordLength) {
        this.minPasswordLength = minPasswordLength;
        return this;
    }

    /**
     * Get minPasswordLength
     *
     * @return minPasswordLength
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MIN_PASSWORD_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getMinPasswordLength() {
        return minPasswordLength;
    }

    @JsonProperty(JSON_PROPERTY_MIN_PASSWORD_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMinPasswordLength(@javax.annotation.Nonnull Integer minPasswordLength) {
        this.minPasswordLength = minPasswordLength;
    }

    public AuthPolicyPrimaryUpdb requireMixedCase(
            @javax.annotation.Nonnull Boolean requireMixedCase) {
        this.requireMixedCase = requireMixedCase;
        return this;
    }

    /**
     * Get requireMixedCase
     *
     * @return requireMixedCase
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIRE_MIXED_CASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getRequireMixedCase() {
        return requireMixedCase;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_MIXED_CASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequireMixedCase(@javax.annotation.Nonnull Boolean requireMixedCase) {
        this.requireMixedCase = requireMixedCase;
    }

    public AuthPolicyPrimaryUpdb requireNumberChar(
            @javax.annotation.Nonnull Boolean requireNumberChar) {
        this.requireNumberChar = requireNumberChar;
        return this;
    }

    /**
     * Get requireNumberChar
     *
     * @return requireNumberChar
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIRE_NUMBER_CHAR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getRequireNumberChar() {
        return requireNumberChar;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_NUMBER_CHAR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequireNumberChar(@javax.annotation.Nonnull Boolean requireNumberChar) {
        this.requireNumberChar = requireNumberChar;
    }

    public AuthPolicyPrimaryUpdb requireSpecialChar(
            @javax.annotation.Nonnull Boolean requireSpecialChar) {
        this.requireSpecialChar = requireSpecialChar;
        return this;
    }

    /**
     * Get requireSpecialChar
     *
     * @return requireSpecialChar
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIRE_SPECIAL_CHAR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getRequireSpecialChar() {
        return requireSpecialChar;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRE_SPECIAL_CHAR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequireSpecialChar(@javax.annotation.Nonnull Boolean requireSpecialChar) {
        this.requireSpecialChar = requireSpecialChar;
    }

    /** Return true if this authPolicyPrimaryUpdb object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthPolicyPrimaryUpdb authPolicyPrimaryUpdb = (AuthPolicyPrimaryUpdb) o;
        return Objects.equals(this.allowed, authPolicyPrimaryUpdb.allowed)
                && Objects.equals(
                        this.lockoutDurationMinutes, authPolicyPrimaryUpdb.lockoutDurationMinutes)
                && Objects.equals(this.maxAttempts, authPolicyPrimaryUpdb.maxAttempts)
                && Objects.equals(this.minPasswordLength, authPolicyPrimaryUpdb.minPasswordLength)
                && Objects.equals(this.requireMixedCase, authPolicyPrimaryUpdb.requireMixedCase)
                && Objects.equals(this.requireNumberChar, authPolicyPrimaryUpdb.requireNumberChar)
                && Objects.equals(
                        this.requireSpecialChar, authPolicyPrimaryUpdb.requireSpecialChar);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                allowed,
                lockoutDurationMinutes,
                maxAttempts,
                minPasswordLength,
                requireMixedCase,
                requireNumberChar,
                requireSpecialChar);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthPolicyPrimaryUpdb {\n");
        sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
        sb.append("    lockoutDurationMinutes: ")
                .append(toIndentedString(lockoutDurationMinutes))
                .append("\n");
        sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
        sb.append("    minPasswordLength: ")
                .append(toIndentedString(minPasswordLength))
                .append("\n");
        sb.append("    requireMixedCase: ").append(toIndentedString(requireMixedCase)).append("\n");
        sb.append("    requireNumberChar: ")
                .append(toIndentedString(requireNumberChar))
                .append("\n");
        sb.append("    requireSpecialChar: ")
                .append(toIndentedString(requireSpecialChar))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `allowed` to the URL query string
        if (getAllowed() != null) {
            joiner.add(
                    String.format(
                            "%sallowed%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAllowed()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `lockoutDurationMinutes` to the URL query string
        if (getLockoutDurationMinutes() != null) {
            joiner.add(
                    String.format(
                            "%slockoutDurationMinutes%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getLockoutDurationMinutes()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `maxAttempts` to the URL query string
        if (getMaxAttempts() != null) {
            joiner.add(
                    String.format(
                            "%smaxAttempts%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMaxAttempts()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `minPasswordLength` to the URL query string
        if (getMinPasswordLength() != null) {
            joiner.add(
                    String.format(
                            "%sminPasswordLength%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getMinPasswordLength()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireMixedCase` to the URL query string
        if (getRequireMixedCase() != null) {
            joiner.add(
                    String.format(
                            "%srequireMixedCase%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireMixedCase()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireNumberChar` to the URL query string
        if (getRequireNumberChar() != null) {
            joiner.add(
                    String.format(
                            "%srequireNumberChar%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireNumberChar()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requireSpecialChar` to the URL query string
        if (getRequireSpecialChar() != null) {
            joiner.add(
                    String.format(
                            "%srequireSpecialChar%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getRequireSpecialChar()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
