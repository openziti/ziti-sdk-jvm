/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;

/** DataIntegrityCheckDetails */
@JsonPropertyOrder({
    DataIntegrityCheckDetails.JSON_PROPERTY_END_TIME,
    DataIntegrityCheckDetails.JSON_PROPERTY_ERROR,
    DataIntegrityCheckDetails.JSON_PROPERTY_FIXING_ERRORS,
    DataIntegrityCheckDetails.JSON_PROPERTY_IN_PROGRESS,
    DataIntegrityCheckDetails.JSON_PROPERTY_RESULTS,
    DataIntegrityCheckDetails.JSON_PROPERTY_START_TIME,
    DataIntegrityCheckDetails.JSON_PROPERTY_TOO_MANY_ERRORS
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class DataIntegrityCheckDetails {
    public static final String JSON_PROPERTY_END_TIME = "endTime";
    @javax.annotation.Nonnull private OffsetDateTime endTime;

    public static final String JSON_PROPERTY_ERROR = "error";
    @javax.annotation.Nonnull private String error;

    public static final String JSON_PROPERTY_FIXING_ERRORS = "fixingErrors";
    @javax.annotation.Nonnull private Boolean fixingErrors;

    public static final String JSON_PROPERTY_IN_PROGRESS = "inProgress";
    @javax.annotation.Nonnull private Boolean inProgress;

    public static final String JSON_PROPERTY_RESULTS = "results";
    @javax.annotation.Nonnull private List<DataIntegrityCheckDetail> results = new ArrayList<>();

    public static final String JSON_PROPERTY_START_TIME = "startTime";
    @javax.annotation.Nonnull private OffsetDateTime startTime;

    public static final String JSON_PROPERTY_TOO_MANY_ERRORS = "tooManyErrors";
    @javax.annotation.Nonnull private Boolean tooManyErrors;

    public DataIntegrityCheckDetails() {}

    public DataIntegrityCheckDetails endTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_END_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getEndTime() {
        return endTime;
    }

    @JsonProperty(JSON_PROPERTY_END_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEndTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
        this.endTime = endTime;
    }

    public DataIntegrityCheckDetails error(@javax.annotation.Nonnull String error) {
        this.error = error;
        return this;
    }

    /**
     * Get error
     *
     * @return error
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getError() {
        return error;
    }

    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setError(@javax.annotation.Nonnull String error) {
        this.error = error;
    }

    public DataIntegrityCheckDetails fixingErrors(@javax.annotation.Nonnull Boolean fixingErrors) {
        this.fixingErrors = fixingErrors;
        return this;
    }

    /**
     * Get fixingErrors
     *
     * @return fixingErrors
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FIXING_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getFixingErrors() {
        return fixingErrors;
    }

    @JsonProperty(JSON_PROPERTY_FIXING_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFixingErrors(@javax.annotation.Nonnull Boolean fixingErrors) {
        this.fixingErrors = fixingErrors;
    }

    public DataIntegrityCheckDetails inProgress(@javax.annotation.Nonnull Boolean inProgress) {
        this.inProgress = inProgress;
        return this;
    }

    /**
     * Get inProgress
     *
     * @return inProgress
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getInProgress() {
        return inProgress;
    }

    @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInProgress(@javax.annotation.Nonnull Boolean inProgress) {
        this.inProgress = inProgress;
    }

    public DataIntegrityCheckDetails results(
            @javax.annotation.Nonnull List<DataIntegrityCheckDetail> results) {
        this.results = results;
        return this;
    }

    public DataIntegrityCheckDetails addResultsItem(DataIntegrityCheckDetail resultsItem) {
        if (this.results == null) {
            this.results = new ArrayList<>();
        }
        this.results.add(resultsItem);
        return this;
    }

    /**
     * Get results
     *
     * @return results
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RESULTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<DataIntegrityCheckDetail> getResults() {
        return results;
    }

    @JsonProperty(JSON_PROPERTY_RESULTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResults(@javax.annotation.Nonnull List<DataIntegrityCheckDetail> results) {
        this.results = results;
    }

    public DataIntegrityCheckDetails startTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     *
     * @return startTime
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStartTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    public DataIntegrityCheckDetails tooManyErrors(
            @javax.annotation.Nonnull Boolean tooManyErrors) {
        this.tooManyErrors = tooManyErrors;
        return this;
    }

    /**
     * Get tooManyErrors
     *
     * @return tooManyErrors
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOO_MANY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTooManyErrors() {
        return tooManyErrors;
    }

    @JsonProperty(JSON_PROPERTY_TOO_MANY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTooManyErrors(@javax.annotation.Nonnull Boolean tooManyErrors) {
        this.tooManyErrors = tooManyErrors;
    }

    /** Return true if this dataIntegrityCheckDetails object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataIntegrityCheckDetails dataIntegrityCheckDetails = (DataIntegrityCheckDetails) o;
        return Objects.equals(this.endTime, dataIntegrityCheckDetails.endTime)
                && Objects.equals(this.error, dataIntegrityCheckDetails.error)
                && Objects.equals(this.fixingErrors, dataIntegrityCheckDetails.fixingErrors)
                && Objects.equals(this.inProgress, dataIntegrityCheckDetails.inProgress)
                && Objects.equals(this.results, dataIntegrityCheckDetails.results)
                && Objects.equals(this.startTime, dataIntegrityCheckDetails.startTime)
                && Objects.equals(this.tooManyErrors, dataIntegrityCheckDetails.tooManyErrors);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                endTime, error, fixingErrors, inProgress, results, startTime, tooManyErrors);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DataIntegrityCheckDetails {\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    fixingErrors: ").append(toIndentedString(fixingErrors)).append("\n");
        sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
        sb.append("    results: ").append(toIndentedString(results)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    tooManyErrors: ").append(toIndentedString(tooManyErrors)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `endTime` to the URL query string
        if (getEndTime() != null) {
            joiner.add(
                    String.format(
                            "%sendTime%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getEndTime()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `error` to the URL query string
        if (getError() != null) {
            joiner.add(
                    String.format(
                            "%serror%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getError()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `fixingErrors` to the URL query string
        if (getFixingErrors() != null) {
            joiner.add(
                    String.format(
                            "%sfixingErrors%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getFixingErrors()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `inProgress` to the URL query string
        if (getInProgress() != null) {
            joiner.add(
                    String.format(
                            "%sinProgress%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getInProgress()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `results` to the URL query string
        if (getResults() != null) {
            for (int i = 0; i < getResults().size(); i++) {
                if (getResults().get(i) != null) {
                    joiner.add(
                            getResults()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sresults%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `startTime` to the URL query string
        if (getStartTime() != null) {
            joiner.add(
                    String.format(
                            "%sstartTime%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getStartTime()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `tooManyErrors` to the URL query string
        if (getTooManyErrors() != null) {
            joiner.add(
                    String.format(
                            "%stooManyErrors%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTooManyErrors()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
