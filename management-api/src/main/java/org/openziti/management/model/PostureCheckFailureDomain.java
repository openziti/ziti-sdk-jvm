/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;
import org.openziti.management.JSON;

/** PostureCheckFailureDomain */
@JsonPropertyOrder({
    PostureCheckFailureDomain.JSON_PROPERTY_ACTUAL_VALUE,
    PostureCheckFailureDomain.JSON_PROPERTY_EXPECTED_VALUE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
@JsonIgnoreProperties(
        value = "postureCheckType", // ignore manually set postureCheckType, it will be
        // automatically generated by Jackson during serialization
        allowSetters = true // allows the postureCheckType to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "postureCheckType",
        visible = true)
public class PostureCheckFailureDomain extends PostureCheckFailure {
    public static final String JSON_PROPERTY_ACTUAL_VALUE = "actualValue";
    @javax.annotation.Nonnull private String actualValue;

    public static final String JSON_PROPERTY_EXPECTED_VALUE = "expectedValue";
    @javax.annotation.Nonnull private List<String> expectedValue = new ArrayList<>();

    public PostureCheckFailureDomain() {}

    public PostureCheckFailureDomain actualValue(@javax.annotation.Nonnull String actualValue) {
        this.actualValue = actualValue;
        return this;
    }

    /**
     * Get actualValue
     *
     * @return actualValue
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACTUAL_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getActualValue() {
        return actualValue;
    }

    @JsonProperty(JSON_PROPERTY_ACTUAL_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setActualValue(@javax.annotation.Nonnull String actualValue) {
        this.actualValue = actualValue;
    }

    public PostureCheckFailureDomain expectedValue(
            @javax.annotation.Nonnull List<String> expectedValue) {
        this.expectedValue = expectedValue;
        return this;
    }

    public PostureCheckFailureDomain addExpectedValueItem(String expectedValueItem) {
        if (this.expectedValue == null) {
            this.expectedValue = new ArrayList<>();
        }
        this.expectedValue.add(expectedValueItem);
        return this;
    }

    /**
     * Get expectedValue
     *
     * @return expectedValue
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getExpectedValue() {
        return expectedValue;
    }

    @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExpectedValue(@javax.annotation.Nonnull List<String> expectedValue) {
        this.expectedValue = expectedValue;
    }

    @Override
    public PostureCheckFailureDomain postureCheckId(
            @javax.annotation.Nonnull String postureCheckId) {
        this.setPostureCheckId(postureCheckId);
        return this;
    }

    @Override
    public PostureCheckFailureDomain postureCheckName(
            @javax.annotation.Nonnull String postureCheckName) {
        this.setPostureCheckName(postureCheckName);
        return this;
    }

    @Override
    public PostureCheckFailureDomain postureCheckType(
            @javax.annotation.Nonnull String postureCheckType) {
        this.setPostureCheckType(postureCheckType);
        return this;
    }

    /** Return true if this postureCheckFailureDomain object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureCheckFailureDomain postureCheckFailureDomain = (PostureCheckFailureDomain) o;
        return Objects.equals(this.actualValue, postureCheckFailureDomain.actualValue)
                && Objects.equals(this.expectedValue, postureCheckFailureDomain.expectedValue)
                && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(actualValue, expectedValue, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureCheckFailureDomain {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    actualValue: ").append(toIndentedString(actualValue)).append("\n");
        sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `postureCheckId` to the URL query string
        if (getPostureCheckId() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `postureCheckName` to the URL query string
        if (getPostureCheckName() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `postureCheckType` to the URL query string
        if (getPostureCheckType() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `actualValue` to the URL query string
        if (getActualValue() != null) {
            joiner.add(
                    String.format(
                            "%sactualValue%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getActualValue()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `expectedValue` to the URL query string
        if (getExpectedValue() != null) {
            for (int i = 0; i < getExpectedValue().size(); i++) {
                joiner.add(
                        String.format(
                                "%sexpectedValue%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(getExpectedValue().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("postureCheckFailureDomain", PostureCheckFailureDomain.class);
        JSON.registerDiscriminator(PostureCheckFailureDomain.class, "postureCheckType", mappings);
    }
}
