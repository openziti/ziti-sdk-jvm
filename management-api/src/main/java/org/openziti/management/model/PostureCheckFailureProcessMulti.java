/*
 * Ziti Edge Management
 * OpenZiti Edge Management API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.management.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.management.ApiClient;
import org.openziti.management.JSON;

/** PostureCheckFailureProcessMulti */
@JsonPropertyOrder({
    PostureCheckFailureProcessMulti.JSON_PROPERTY_ACTUAL_VALUE,
    PostureCheckFailureProcessMulti.JSON_PROPERTY_EXPECTED_VALUE,
    PostureCheckFailureProcessMulti.JSON_PROPERTY_SEMANTIC
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:49.931993799-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
@JsonIgnoreProperties(
        value = "postureCheckType", // ignore manually set postureCheckType, it will be
        // automatically generated by Jackson during serialization
        allowSetters = true // allows the postureCheckType to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "postureCheckType",
        visible = true)
public class PostureCheckFailureProcessMulti extends PostureCheckFailure {
    public static final String JSON_PROPERTY_ACTUAL_VALUE = "actualValue";

    @javax.annotation.Nonnull
    private List<PostureCheckFailureProcessActual> actualValue = new ArrayList<>();

    public static final String JSON_PROPERTY_EXPECTED_VALUE = "expectedValue";
    @javax.annotation.Nonnull private List<ProcessMulti> expectedValue = new ArrayList<>();

    public static final String JSON_PROPERTY_SEMANTIC = "semantic";
    @javax.annotation.Nonnull private Semantic semantic;

    public PostureCheckFailureProcessMulti() {}

    public PostureCheckFailureProcessMulti actualValue(
            @javax.annotation.Nonnull List<PostureCheckFailureProcessActual> actualValue) {
        this.actualValue = actualValue;
        return this;
    }

    public PostureCheckFailureProcessMulti addActualValueItem(
            PostureCheckFailureProcessActual actualValueItem) {
        if (this.actualValue == null) {
            this.actualValue = new ArrayList<>();
        }
        this.actualValue.add(actualValueItem);
        return this;
    }

    /**
     * Get actualValue
     *
     * @return actualValue
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACTUAL_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<PostureCheckFailureProcessActual> getActualValue() {
        return actualValue;
    }

    @JsonProperty(JSON_PROPERTY_ACTUAL_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setActualValue(
            @javax.annotation.Nonnull List<PostureCheckFailureProcessActual> actualValue) {
        this.actualValue = actualValue;
    }

    public PostureCheckFailureProcessMulti expectedValue(
            @javax.annotation.Nonnull List<ProcessMulti> expectedValue) {
        this.expectedValue = expectedValue;
        return this;
    }

    public PostureCheckFailureProcessMulti addExpectedValueItem(ProcessMulti expectedValueItem) {
        if (this.expectedValue == null) {
            this.expectedValue = new ArrayList<>();
        }
        this.expectedValue.add(expectedValueItem);
        return this;
    }

    /**
     * Get expectedValue
     *
     * @return expectedValue
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<ProcessMulti> getExpectedValue() {
        return expectedValue;
    }

    @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExpectedValue(@javax.annotation.Nonnull List<ProcessMulti> expectedValue) {
        this.expectedValue = expectedValue;
    }

    public PostureCheckFailureProcessMulti semantic(@javax.annotation.Nonnull Semantic semantic) {
        this.semantic = semantic;
        return this;
    }

    /**
     * Get semantic
     *
     * @return semantic
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SEMANTIC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Semantic getSemantic() {
        return semantic;
    }

    @JsonProperty(JSON_PROPERTY_SEMANTIC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSemantic(@javax.annotation.Nonnull Semantic semantic) {
        this.semantic = semantic;
    }

    @Override
    public PostureCheckFailureProcessMulti postureCheckId(
            @javax.annotation.Nonnull String postureCheckId) {
        this.setPostureCheckId(postureCheckId);
        return this;
    }

    @Override
    public PostureCheckFailureProcessMulti postureCheckName(
            @javax.annotation.Nonnull String postureCheckName) {
        this.setPostureCheckName(postureCheckName);
        return this;
    }

    @Override
    public PostureCheckFailureProcessMulti postureCheckType(
            @javax.annotation.Nonnull String postureCheckType) {
        this.setPostureCheckType(postureCheckType);
        return this;
    }

    /** Return true if this postureCheckFailureProcessMulti object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureCheckFailureProcessMulti postureCheckFailureProcessMulti =
                (PostureCheckFailureProcessMulti) o;
        return Objects.equals(this.actualValue, postureCheckFailureProcessMulti.actualValue)
                && Objects.equals(this.expectedValue, postureCheckFailureProcessMulti.expectedValue)
                && Objects.equals(this.semantic, postureCheckFailureProcessMulti.semantic)
                && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(actualValue, expectedValue, semantic, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureCheckFailureProcessMulti {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    actualValue: ").append(toIndentedString(actualValue)).append("\n");
        sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
        sb.append("    semantic: ").append(toIndentedString(semantic)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `postureCheckId` to the URL query string
        if (getPostureCheckId() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `postureCheckName` to the URL query string
        if (getPostureCheckName() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `postureCheckType` to the URL query string
        if (getPostureCheckType() != null) {
            joiner.add(
                    String.format(
                            "%spostureCheckType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getPostureCheckType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `actualValue` to the URL query string
        if (getActualValue() != null) {
            for (int i = 0; i < getActualValue().size(); i++) {
                if (getActualValue().get(i) != null) {
                    joiner.add(
                            getActualValue()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sactualValue%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `expectedValue` to the URL query string
        if (getExpectedValue() != null) {
            for (int i = 0; i < getExpectedValue().size(); i++) {
                if (getExpectedValue().get(i) != null) {
                    joiner.add(
                            getExpectedValue()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sexpectedValue%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `semantic` to the URL query string
        if (getSemantic() != null) {
            joiner.add(
                    String.format(
                            "%ssemantic%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getSemantic()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("postureCheckFailureProcessMulti", PostureCheckFailureProcessMulti.class);
        JSON.registerDiscriminator(
                PostureCheckFailureProcessMulti.class, "postureCheckType", mappings);
    }
}
