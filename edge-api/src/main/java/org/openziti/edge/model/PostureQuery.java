/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.edge.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.edge.ApiClient;

/** PostureQuery */
@JsonPropertyOrder({
    PostureQuery.JSON_PROPERTY_LINKS,
    PostureQuery.JSON_PROPERTY_CREATED_AT,
    PostureQuery.JSON_PROPERTY_ID,
    PostureQuery.JSON_PROPERTY_TAGS,
    PostureQuery.JSON_PROPERTY_UPDATED_AT,
    PostureQuery.JSON_PROPERTY_IS_PASSING,
    PostureQuery.JSON_PROPERTY_PROCESS,
    PostureQuery.JSON_PROPERTY_PROCESSES,
    PostureQuery.JSON_PROPERTY_QUERY_TYPE,
    PostureQuery.JSON_PROPERTY_TIMEOUT,
    PostureQuery.JSON_PROPERTY_TIMEOUT_REMAINING
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:45.850758361-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class PostureQuery {
    public static final String JSON_PROPERTY_LINKS = "_links";
    @javax.annotation.Nonnull private Map<String, Link> links = new HashMap<>();

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    @javax.annotation.Nonnull private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_ID = "id";
    @javax.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_TAGS = "tags";
    @javax.annotation.Nullable private Tags tags;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    @javax.annotation.Nonnull private OffsetDateTime updatedAt;

    public static final String JSON_PROPERTY_IS_PASSING = "isPassing";
    @javax.annotation.Nonnull private Boolean isPassing;

    public static final String JSON_PROPERTY_PROCESS = "process";
    @javax.annotation.Nullable private PostureQueryProcess process;

    public static final String JSON_PROPERTY_PROCESSES = "processes";
    @javax.annotation.Nullable private List<PostureQueryProcess> processes = new ArrayList<>();

    public static final String JSON_PROPERTY_QUERY_TYPE = "queryType";
    @javax.annotation.Nonnull private PostureCheckType queryType;

    public static final String JSON_PROPERTY_TIMEOUT = "timeout";
    @javax.annotation.Nonnull private Integer timeout;

    public static final String JSON_PROPERTY_TIMEOUT_REMAINING = "timeoutRemaining";
    @javax.annotation.Nonnull private Integer timeoutRemaining;

    public PostureQuery() {}

    public PostureQuery links(@javax.annotation.Nonnull Map<String, Link> links) {
        this.links = links;
        return this;
    }

    public PostureQuery putLinksItem(String key, Link linksItem) {
        if (this.links == null) {
            this.links = new HashMap<>();
        }
        this.links.put(key, linksItem);
        return this;
    }

    /**
     * A map of named links
     *
     * @return links
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, Link> getLinks() {
        return links;
    }

    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLinks(@javax.annotation.Nonnull Map<String, Link> links) {
        this.links = links;
    }

    public PostureQuery createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get createdAt
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public PostureQuery id(@javax.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@javax.annotation.Nonnull String id) {
        this.id = id;
    }

    public PostureQuery tags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get tags
     *
     * @return tags
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Tags getTags() {
        return tags;
    }

    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
    }

    public PostureQuery updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get updatedAt
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public PostureQuery isPassing(@javax.annotation.Nonnull Boolean isPassing) {
        this.isPassing = isPassing;
        return this;
    }

    /**
     * Get isPassing
     *
     * @return isPassing
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IS_PASSING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsPassing() {
        return isPassing;
    }

    @JsonProperty(JSON_PROPERTY_IS_PASSING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsPassing(@javax.annotation.Nonnull Boolean isPassing) {
        this.isPassing = isPassing;
    }

    public PostureQuery process(@javax.annotation.Nullable PostureQueryProcess process) {
        this.process = process;
        return this;
    }

    /**
     * Get process
     *
     * @return process
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PostureQueryProcess getProcess() {
        return process;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcess(@javax.annotation.Nullable PostureQueryProcess process) {
        this.process = process;
    }

    public PostureQuery processes(@javax.annotation.Nullable List<PostureQueryProcess> processes) {
        this.processes = processes;
        return this;
    }

    public PostureQuery addProcessesItem(PostureQueryProcess processesItem) {
        if (this.processes == null) {
            this.processes = new ArrayList<>();
        }
        this.processes.add(processesItem);
        return this;
    }

    /**
     * Get processes
     *
     * @return processes
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROCESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<PostureQueryProcess> getProcesses() {
        return processes;
    }

    @JsonProperty(JSON_PROPERTY_PROCESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcesses(@javax.annotation.Nullable List<PostureQueryProcess> processes) {
        this.processes = processes;
    }

    public PostureQuery queryType(@javax.annotation.Nonnull PostureCheckType queryType) {
        this.queryType = queryType;
        return this;
    }

    /**
     * Get queryType
     *
     * @return queryType
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUERY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostureCheckType getQueryType() {
        return queryType;
    }

    @JsonProperty(JSON_PROPERTY_QUERY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQueryType(@javax.annotation.Nonnull PostureCheckType queryType) {
        this.queryType = queryType;
    }

    public PostureQuery timeout(@javax.annotation.Nonnull Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get timeout
     *
     * @return timeout
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTimeout() {
        return timeout;
    }

    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimeout(@javax.annotation.Nonnull Integer timeout) {
        this.timeout = timeout;
    }

    public PostureQuery timeoutRemaining(@javax.annotation.Nonnull Integer timeoutRemaining) {
        this.timeoutRemaining = timeoutRemaining;
        return this;
    }

    /**
     * Get timeoutRemaining
     *
     * @return timeoutRemaining
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIMEOUT_REMAINING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTimeoutRemaining() {
        return timeoutRemaining;
    }

    @JsonProperty(JSON_PROPERTY_TIMEOUT_REMAINING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimeoutRemaining(@javax.annotation.Nonnull Integer timeoutRemaining) {
        this.timeoutRemaining = timeoutRemaining;
    }

    /** Return true if this postureQuery object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostureQuery postureQuery = (PostureQuery) o;
        return Objects.equals(this.links, postureQuery.links)
                && Objects.equals(this.createdAt, postureQuery.createdAt)
                && Objects.equals(this.id, postureQuery.id)
                && Objects.equals(this.tags, postureQuery.tags)
                && Objects.equals(this.updatedAt, postureQuery.updatedAt)
                && Objects.equals(this.isPassing, postureQuery.isPassing)
                && Objects.equals(this.process, postureQuery.process)
                && Objects.equals(this.processes, postureQuery.processes)
                && Objects.equals(this.queryType, postureQuery.queryType)
                && Objects.equals(this.timeout, postureQuery.timeout)
                && Objects.equals(this.timeoutRemaining, postureQuery.timeoutRemaining);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                links,
                createdAt,
                id,
                tags,
                updatedAt,
                isPassing,
                process,
                processes,
                queryType,
                timeout,
                timeoutRemaining);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostureQuery {\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    isPassing: ").append(toIndentedString(isPassing)).append("\n");
        sb.append("    process: ").append(toIndentedString(process)).append("\n");
        sb.append("    processes: ").append(toIndentedString(processes)).append("\n");
        sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("    timeoutRemaining: ").append(toIndentedString(timeoutRemaining)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `_links` to the URL query string
        if (getLinks() != null) {
            for (String _key : getLinks().keySet()) {
                if (getLinks().get(_key) != null) {
                    joiner.add(
                            getLinks()
                                    .get(_key)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%s_links%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    _key,
                                                                    containerSuffix))));
                }
            }
        }

        // add `createdAt` to the URL query string
        if (getCreatedAt() != null) {
            joiner.add(
                    String.format(
                            "%screatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCreatedAt()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `tags` to the URL query string
        if (getTags() != null) {
            joiner.add(getTags().toUrlQueryString(prefix + "tags" + suffix));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getUpdatedAt()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `isPassing` to the URL query string
        if (getIsPassing() != null) {
            joiner.add(
                    String.format(
                            "%sisPassing%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getIsPassing()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `process` to the URL query string
        if (getProcess() != null) {
            joiner.add(getProcess().toUrlQueryString(prefix + "process" + suffix));
        }

        // add `processes` to the URL query string
        if (getProcesses() != null) {
            for (int i = 0; i < getProcesses().size(); i++) {
                if (getProcesses().get(i) != null) {
                    joiner.add(
                            getProcesses()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sprocesses%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `queryType` to the URL query string
        if (getQueryType() != null) {
            joiner.add(
                    String.format(
                            "%squeryType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getQueryType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `timeout` to the URL query string
        if (getTimeout() != null) {
            joiner.add(
                    String.format(
                            "%stimeout%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTimeout()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `timeoutRemaining` to the URL query string
        if (getTimeoutRemaining() != null) {
            joiner.add(
                    String.format(
                            "%stimeoutRemaining%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTimeoutRemaining()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
