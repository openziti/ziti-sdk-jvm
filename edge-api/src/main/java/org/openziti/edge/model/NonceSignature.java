/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.edge.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;
import org.openziti.edge.ApiClient;

/** NonceSignature */
@JsonPropertyOrder({
    NonceSignature.JSON_PROPERTY_ALGORITHM,
    NonceSignature.JSON_PROPERTY_CA_POOL,
    NonceSignature.JSON_PROPERTY_KID,
    NonceSignature.JSON_PROPERTY_SIGNATURE
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:45.850758361-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class NonceSignature {
    public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
    @javax.annotation.Nonnull private String algorithm;

    public static final String JSON_PROPERTY_CA_POOL = "caPool";
    @javax.annotation.Nonnull private String caPool;

    public static final String JSON_PROPERTY_KID = "kid";
    @javax.annotation.Nonnull private String kid;

    public static final String JSON_PROPERTY_SIGNATURE = "signature";
    @javax.annotation.Nonnull private String signature;

    public NonceSignature() {}

    public NonceSignature algorithm(@javax.annotation.Nonnull String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get algorithm
     *
     * @return algorithm
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAlgorithm() {
        return algorithm;
    }

    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAlgorithm(@javax.annotation.Nonnull String algorithm) {
        this.algorithm = algorithm;
    }

    public NonceSignature caPool(@javax.annotation.Nonnull String caPool) {
        this.caPool = caPool;
        return this;
    }

    /**
     * Get caPool
     *
     * @return caPool
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CA_POOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCaPool() {
        return caPool;
    }

    @JsonProperty(JSON_PROPERTY_CA_POOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCaPool(@javax.annotation.Nonnull String caPool) {
        this.caPool = caPool;
    }

    public NonceSignature kid(@javax.annotation.Nonnull String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Get kid
     *
     * @return kid
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_KID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getKid() {
        return kid;
    }

    @JsonProperty(JSON_PROPERTY_KID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setKid(@javax.annotation.Nonnull String kid) {
        this.kid = kid;
    }

    public NonceSignature signature(@javax.annotation.Nonnull String signature) {
        this.signature = signature;
        return this;
    }

    /**
     * Get signature
     *
     * @return signature
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SIGNATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSignature() {
        return signature;
    }

    @JsonProperty(JSON_PROPERTY_SIGNATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSignature(@javax.annotation.Nonnull String signature) {
        this.signature = signature;
    }

    /** Return true if this nonceSignature object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NonceSignature nonceSignature = (NonceSignature) o;
        return Objects.equals(this.algorithm, nonceSignature.algorithm)
                && Objects.equals(this.caPool, nonceSignature.caPool)
                && Objects.equals(this.kid, nonceSignature.kid)
                && Objects.equals(this.signature, nonceSignature.signature);
    }

    @Override
    public int hashCode() {
        return Objects.hash(algorithm, caPool, kid, signature);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NonceSignature {\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("    caPool: ").append(toIndentedString(caPool)).append("\n");
        sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
        sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `algorithm` to the URL query string
        if (getAlgorithm() != null) {
            joiner.add(
                    String.format(
                            "%salgorithm%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAlgorithm()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `caPool` to the URL query string
        if (getCaPool() != null) {
            joiner.add(
                    String.format(
                            "%scaPool%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCaPool()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `kid` to the URL query string
        if (getKid() != null) {
            joiner.add(
                    String.format(
                            "%skid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getKid()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `signature` to the URL query string
        if (getSignature() != null) {
            joiner.add(
                    String.format(
                            "%ssignature%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getSignature()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
