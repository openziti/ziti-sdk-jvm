/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.42
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.edge.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openziti.edge.ApiClient;

/** A External JWT Signer resource */
@JsonPropertyOrder({
    ClientExternalJwtSignerDetail.JSON_PROPERTY_LINKS,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_CREATED_AT,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_ID,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_TAGS,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_UPDATED_AT,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_AUDIENCE,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_CLIENT_ID,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_EXTERNAL_AUTH_URL,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_NAME,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_OPEN_ID_CONFIGURATION_URL,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_SCOPES,
    ClientExternalJwtSignerDetail.JSON_PROPERTY_TARGET_TOKEN
})
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-03-17T12:51:45.850758361-04:00[America/New_York]",
        comments = "Generator version: 7.11.0")
public class ClientExternalJwtSignerDetail {
    public static final String JSON_PROPERTY_LINKS = "_links";
    @javax.annotation.Nonnull private Map<String, Link> links = new HashMap<>();

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    @javax.annotation.Nonnull private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_ID = "id";
    @javax.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_TAGS = "tags";
    @javax.annotation.Nullable private Tags tags;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    @javax.annotation.Nonnull private OffsetDateTime updatedAt;

    public static final String JSON_PROPERTY_AUDIENCE = "audience";
    private JsonNullable<String> audience = JsonNullable.<String>undefined();

    public static final String JSON_PROPERTY_CLIENT_ID = "clientId";
    private JsonNullable<String> clientId = JsonNullable.<String>undefined();

    public static final String JSON_PROPERTY_EXTERNAL_AUTH_URL = "externalAuthUrl";
    @javax.annotation.Nonnull private String externalAuthUrl;

    public static final String JSON_PROPERTY_NAME = "name";
    @javax.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_OPEN_ID_CONFIGURATION_URL = "openIdConfigurationUrl";
    @javax.annotation.Nullable private String openIdConfigurationUrl;

    public static final String JSON_PROPERTY_SCOPES = "scopes";
    @javax.annotation.Nullable private List<String> scopes = new ArrayList<>();

    public static final String JSON_PROPERTY_TARGET_TOKEN = "targetToken";
    private JsonNullable<TargetToken> targetToken = JsonNullable.<TargetToken>undefined();

    public ClientExternalJwtSignerDetail() {}

    public ClientExternalJwtSignerDetail links(@javax.annotation.Nonnull Map<String, Link> links) {
        this.links = links;
        return this;
    }

    public ClientExternalJwtSignerDetail putLinksItem(String key, Link linksItem) {
        if (this.links == null) {
            this.links = new HashMap<>();
        }
        this.links.put(key, linksItem);
        return this;
    }

    /**
     * A map of named links
     *
     * @return links
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, Link> getLinks() {
        return links;
    }

    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLinks(@javax.annotation.Nonnull Map<String, Link> links) {
        this.links = links;
    }

    public ClientExternalJwtSignerDetail createdAt(
            @javax.annotation.Nonnull OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get createdAt
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public ClientExternalJwtSignerDetail id(@javax.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@javax.annotation.Nonnull String id) {
        this.id = id;
    }

    public ClientExternalJwtSignerDetail tags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get tags
     *
     * @return tags
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Tags getTags() {
        return tags;
    }

    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTags(@javax.annotation.Nullable Tags tags) {
        this.tags = tags;
    }

    public ClientExternalJwtSignerDetail updatedAt(
            @javax.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get updatedAt
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public ClientExternalJwtSignerDetail audience(@javax.annotation.Nullable String audience) {
        this.audience = JsonNullable.<String>of(audience);
        return this;
    }

    /**
     * Get audience
     *
     * @return audience
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public String getAudience() {
        return audience.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_AUDIENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<String> getAudience_JsonNullable() {
        return audience;
    }

    @JsonProperty(JSON_PROPERTY_AUDIENCE)
    public void setAudience_JsonNullable(JsonNullable<String> audience) {
        this.audience = audience;
    }

    public void setAudience(@javax.annotation.Nullable String audience) {
        this.audience = JsonNullable.<String>of(audience);
    }

    public ClientExternalJwtSignerDetail clientId(@javax.annotation.Nullable String clientId) {
        this.clientId = JsonNullable.<String>of(clientId);
        return this;
    }

    /**
     * Get clientId
     *
     * @return clientId
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public String getClientId() {
        return clientId.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<String> getClientId_JsonNullable() {
        return clientId;
    }

    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    public void setClientId_JsonNullable(JsonNullable<String> clientId) {
        this.clientId = clientId;
    }

    public void setClientId(@javax.annotation.Nullable String clientId) {
        this.clientId = JsonNullable.<String>of(clientId);
    }

    public ClientExternalJwtSignerDetail externalAuthUrl(
            @javax.annotation.Nonnull String externalAuthUrl) {
        this.externalAuthUrl = externalAuthUrl;
        return this;
    }

    /**
     * Get externalAuthUrl
     *
     * @return externalAuthUrl
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXTERNAL_AUTH_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getExternalAuthUrl() {
        return externalAuthUrl;
    }

    @JsonProperty(JSON_PROPERTY_EXTERNAL_AUTH_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExternalAuthUrl(@javax.annotation.Nonnull String externalAuthUrl) {
        this.externalAuthUrl = externalAuthUrl;
    }

    public ClientExternalJwtSignerDetail name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public ClientExternalJwtSignerDetail openIdConfigurationUrl(
            @javax.annotation.Nullable String openIdConfigurationUrl) {
        this.openIdConfigurationUrl = openIdConfigurationUrl;
        return this;
    }

    /**
     * Get openIdConfigurationUrl
     *
     * @return openIdConfigurationUrl
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPEN_ID_CONFIGURATION_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOpenIdConfigurationUrl() {
        return openIdConfigurationUrl;
    }

    @JsonProperty(JSON_PROPERTY_OPEN_ID_CONFIGURATION_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOpenIdConfigurationUrl(
            @javax.annotation.Nullable String openIdConfigurationUrl) {
        this.openIdConfigurationUrl = openIdConfigurationUrl;
    }

    public ClientExternalJwtSignerDetail scopes(@javax.annotation.Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    public ClientExternalJwtSignerDetail addScopesItem(String scopesItem) {
        if (this.scopes == null) {
            this.scopes = new ArrayList<>();
        }
        this.scopes.add(scopesItem);
        return this;
    }

    /**
     * Get scopes
     *
     * @return scopes
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getScopes() {
        return scopes;
    }

    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScopes(@javax.annotation.Nullable List<String> scopes) {
        this.scopes = scopes;
    }

    public ClientExternalJwtSignerDetail targetToken(
            @javax.annotation.Nullable TargetToken targetToken) {
        this.targetToken = JsonNullable.<TargetToken>of(targetToken);
        return this;
    }

    /**
     * Get targetToken
     *
     * @return targetToken
     */
    @javax.annotation.Nullable
    @JsonIgnore
    public TargetToken getTargetToken() {
        return targetToken.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_TARGET_TOKEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<TargetToken> getTargetToken_JsonNullable() {
        return targetToken;
    }

    @JsonProperty(JSON_PROPERTY_TARGET_TOKEN)
    public void setTargetToken_JsonNullable(JsonNullable<TargetToken> targetToken) {
        this.targetToken = targetToken;
    }

    public void setTargetToken(@javax.annotation.Nullable TargetToken targetToken) {
        this.targetToken = JsonNullable.<TargetToken>of(targetToken);
    }

    /** Return true if this clientExternalJwtSignerDetail object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientExternalJwtSignerDetail clientExternalJwtSignerDetail =
                (ClientExternalJwtSignerDetail) o;
        return Objects.equals(this.links, clientExternalJwtSignerDetail.links)
                && Objects.equals(this.createdAt, clientExternalJwtSignerDetail.createdAt)
                && Objects.equals(this.id, clientExternalJwtSignerDetail.id)
                && Objects.equals(this.tags, clientExternalJwtSignerDetail.tags)
                && Objects.equals(this.updatedAt, clientExternalJwtSignerDetail.updatedAt)
                && equalsNullable(this.audience, clientExternalJwtSignerDetail.audience)
                && equalsNullable(this.clientId, clientExternalJwtSignerDetail.clientId)
                && Objects.equals(
                        this.externalAuthUrl, clientExternalJwtSignerDetail.externalAuthUrl)
                && Objects.equals(this.name, clientExternalJwtSignerDetail.name)
                && Objects.equals(
                        this.openIdConfigurationUrl,
                        clientExternalJwtSignerDetail.openIdConfigurationUrl)
                && Objects.equals(this.scopes, clientExternalJwtSignerDetail.scopes)
                && equalsNullable(this.targetToken, clientExternalJwtSignerDetail.targetToken);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                links,
                createdAt,
                id,
                tags,
                updatedAt,
                hashCodeNullable(audience),
                hashCodeNullable(clientId),
                externalAuthUrl,
                name,
                openIdConfigurationUrl,
                scopes,
                hashCodeNullable(targetToken));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ClientExternalJwtSignerDetail {\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    externalAuthUrl: ").append(toIndentedString(externalAuthUrl)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    openIdConfigurationUrl: ")
                .append(toIndentedString(openIdConfigurationUrl))
                .append("\n");
        sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
        sb.append("    targetToken: ").append(toIndentedString(targetToken)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `_links` to the URL query string
        if (getLinks() != null) {
            for (String _key : getLinks().keySet()) {
                if (getLinks().get(_key) != null) {
                    joiner.add(
                            getLinks()
                                    .get(_key)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%s_links%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    _key,
                                                                    containerSuffix))));
                }
            }
        }

        // add `createdAt` to the URL query string
        if (getCreatedAt() != null) {
            joiner.add(
                    String.format(
                            "%screatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getCreatedAt()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `tags` to the URL query string
        if (getTags() != null) {
            joiner.add(getTags().toUrlQueryString(prefix + "tags" + suffix));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getUpdatedAt()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `audience` to the URL query string
        if (getAudience() != null) {
            joiner.add(
                    String.format(
                            "%saudience%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getAudience()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `clientId` to the URL query string
        if (getClientId() != null) {
            joiner.add(
                    String.format(
                            "%sclientId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getClientId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `externalAuthUrl` to the URL query string
        if (getExternalAuthUrl() != null) {
            joiner.add(
                    String.format(
                            "%sexternalAuthUrl%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getExternalAuthUrl()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `openIdConfigurationUrl` to the URL query string
        if (getOpenIdConfigurationUrl() != null) {
            joiner.add(
                    String.format(
                            "%sopenIdConfigurationUrl%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getOpenIdConfigurationUrl()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `scopes` to the URL query string
        if (getScopes() != null) {
            for (int i = 0; i < getScopes().size(); i++) {
                joiner.add(
                        String.format(
                                "%sscopes%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                ApiClient.valueToString(getScopes().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `targetToken` to the URL query string
        if (getTargetToken() != null) {
            joiner.add(
                    String.format(
                            "%stargetToken%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            ApiClient.valueToString(getTargetToken()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
